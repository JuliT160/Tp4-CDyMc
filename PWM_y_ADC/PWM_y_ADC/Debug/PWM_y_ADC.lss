
PWM_y_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001c2  008001c2  0000064e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce7  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e9  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d5  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e4  00000000  00000000  00002ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_7>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	05 01       	movw	r0, r10
  6a:	21 01       	movw	r4, r2
  6c:	09 01       	movw	r0, r18
  6e:	0d 01       	movw	r0, r26
  70:	11 01       	movw	r2, r2
  72:	15 01       	movw	r2, r10
  74:	19 01       	movw	r2, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e8 ef       	ldi	r30, 0xF8	; 248
  8a:	f4 e0       	ldi	r31, 0x04	; 4
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 3c       	cpi	r26, 0xC2	; 194
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a2 ec       	ldi	r26, 0xC2	; 194
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 3c       	cpi	r26, 0xC5	; 197
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  ac:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <ADC_init>:
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	80 83       	st	Z, r24
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	87 60       	ori	r24, 0x07	; 7
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <ADC_start>:
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	89 2b       	or	r24, r25
  ea:	80 83       	st	Z, r24
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <mostrarMenu>:
		}
	}
}

void mostrarMenu(void) {
	UART_EnviarString("\r\n=== MENU DE COLORES ===");
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n1. Rojo");
 100:	8b e1       	ldi	r24, 0x1B	; 27
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n2. Verde");
 108:	85 e2       	ldi	r24, 0x25	; 37
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n3. Azul");
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n4. Cian");
 118:	8a e3       	ldi	r24, 0x3A	; 58
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n5. Amarillo");
 120:	84 e4       	ldi	r24, 0x44	; 68
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n6. Magenta");
 128:	82 e5       	ldi	r24, 0x52	; 82
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n7. Blanco");
 130:	8f e5       	ldi	r24, 0x5F	; 95
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	UART_EnviarString("\r\n8. Negro\r\n");
 138:	8b e6       	ldi	r24, 0x6B	; 107
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
 140:	08 95       	ret

00000142 <main>:
//Prototipos de funciones
void mostrarMenu(void);

int main(void)
{
	PWM0_init();
 142:	0e 94 64 01 	call	0x2c8	; 0x2c8 <PWM0_init>
	ADC_init();
 146:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_init>
	UART_Init();
 14a:	0e 94 02 02 	call	0x404	; 0x404 <UART_Init>
	ADC_start(3);                 // Primera conversi�n
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	0e 94 6f 00 	call	0xde	; 0xde <ADC_start>

	sei();
 154:	78 94       	sei
	
	UART_EnviarString("\r\nSistema de Control por Colores - 8 Opciones\r\n");
 156:	88 e7       	ldi	r24, 0x78	; 120
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
	mostrarMenu();
 15e:	0e 94 7c 00 	call	0xf8	; 0xf8 <mostrarMenu>

	while(1)
	{
		if (nueva_opcion) {
 162:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
 166:	88 23       	and	r24, r24
 168:	e1 f3       	breq	.-8      	; 0x162 <main+0x20>
			UART_EnviarString("\r\nOpci�n seleccionada: ");
 16a:	88 ea       	ldi	r24, 0xA8	; 168
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
			UART_EnviarString(seleccion);
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_EnviarString>
			nueva_opcion = 0;
 17c:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
			mostrarMenu();
 180:	0e 94 7c 00 	call	0xf8	; 0xf8 <mostrarMenu>
 184:	ee cf       	rjmp	.-36     	; 0x162 <main+0x20>

00000186 <__vector_18>:
	UART_EnviarString("\r\n7. Blanco");
	UART_EnviarString("\r\n8. Negro\r\n");
}

ISR(USART_RX_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	8f 93       	push	r24
	seleccion = UDR0;   // Guardar �ltima tecla recibida
 192:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	nueva_opcion = 1;   // Avisar al main que hay nueva opci�n
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
}
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_21>:

ISR(ADC_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	1f 93       	push	r17
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	uint16_t valor_adc = ADC;
 1d4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1d8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint8_t brillo = (valor_adc * 100ul) / 1023;  // Escalar a porcentaje (0�100) (0-1)
 1dc:	a4 e6       	ldi	r26, 0x64	; 100
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	0e 94 57 02 	call	0x4ae	; 0x4ae <__umulhisi3>
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	33 e0       	ldi	r19, 0x03	; 3
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodsi4>

	uint8_t r = 0, g = 0, b = 0;

	switch(seleccion)
 1f0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	8e 2f       	mov	r24, r30
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	f1 97       	sbiw	r30, 0x31	; 49
 1fc:	e7 30       	cpi	r30, 0x07	; 7
 1fe:	f1 05       	cpc	r31, r1
 200:	e0 f4       	brcc	.+56     	; 0x23a <__vector_21+0x8e>
 202:	ec 5c       	subi	r30, 0xCC	; 204
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__tablejump2__>
	{
		case '1': r = 255; g = 0; b = 0; break;                          // Rojo
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	5f ef       	ldi	r21, 0xFF	; 255
 210:	1b c0       	rjmp	.+54     	; 0x248 <__vector_21+0x9c>
		case '2': r = 0; g = 255; b = 0; break;                          // Verde
		case '3': r = 0; g = 0; b = 255; break;                          // Azul
 212:	4f ef       	ldi	r20, 0xFF	; 255
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	17 c0       	rjmp	.+46     	; 0x248 <__vector_21+0x9c>
		case '4': r = 0; g = 255; b = 255; break;                        // Cian
 21a:	4f ef       	ldi	r20, 0xFF	; 255
 21c:	cf ef       	ldi	r28, 0xFF	; 255
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	13 c0       	rjmp	.+38     	; 0x248 <__vector_21+0x9c>
		case '5': r = 255; g = 255; b = 0; break;                        // Amarillo
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	cf ef       	ldi	r28, 0xFF	; 255
 226:	5f ef       	ldi	r21, 0xFF	; 255
 228:	0f c0       	rjmp	.+30     	; 0x248 <__vector_21+0x9c>
		case '6': r = 255; g = 0; b = 255; break;                        // Magenta
 22a:	4f ef       	ldi	r20, 0xFF	; 255
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	5f ef       	ldi	r21, 0xFF	; 255
 230:	0b c0       	rjmp	.+22     	; 0x248 <__vector_21+0x9c>
		case '7': r = 255; g = 255; b = 255; break;                      // Blanco
 232:	4f ef       	ldi	r20, 0xFF	; 255
 234:	cf ef       	ldi	r28, 0xFF	; 255
 236:	5f ef       	ldi	r21, 0xFF	; 255
 238:	07 c0       	rjmp	.+14     	; 0x248 <__vector_21+0x9c>
		case '8': default: r = 0; g = 0; b = 0; break;                   // Negro
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	c0 e0       	ldi	r28, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	03 c0       	rjmp	.+6      	; 0x248 <__vector_21+0x9c>
	uint8_t r = 0, g = 0, b = 0;

	switch(seleccion)
	{
		case '1': r = 255; g = 0; b = 0; break;                          // Rojo
		case '2': r = 0; g = 255; b = 0; break;                          // Verde
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	cf ef       	ldi	r28, 0xFF	; 255
 246:	50 e0       	ldi	r21, 0x00	; 0
		case '7': r = 255; g = 255; b = 255; break;                      // Blanco
		case '8': default: r = 0; g = 0; b = 0; break;                   // Negro
	}

	// Aplicar brillo (0�100%) al color base
	uint8_t pwm_r = (r * brillo) / 255;
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	52 9f       	mul	r21, r18
 24c:	c0 01       	movw	r24, r0
 24e:	53 9f       	mul	r21, r19
 250:	90 0d       	add	r25, r0
 252:	11 24       	eor	r1, r1
 254:	ef ef       	ldi	r30, 0xFF	; 255
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	bf 01       	movw	r22, r30
 25a:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodhi4>
 25e:	16 2f       	mov	r17, r22
	uint8_t pwm_g = (g * brillo) / 255;
 260:	c2 9f       	mul	r28, r18
 262:	c0 01       	movw	r24, r0
 264:	c3 9f       	mul	r28, r19
 266:	90 0d       	add	r25, r0
 268:	11 24       	eor	r1, r1
 26a:	bf 01       	movw	r22, r30
 26c:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodhi4>
 270:	d6 2f       	mov	r29, r22
	uint8_t pwm_b = (b * brillo) / 255;
 272:	42 9f       	mul	r20, r18
 274:	c0 01       	movw	r24, r0
 276:	43 9f       	mul	r20, r19
 278:	90 0d       	add	r25, r0
 27a:	11 24       	eor	r1, r1
 27c:	bf 01       	movw	r22, r30
 27e:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodhi4>
 282:	c6 2f       	mov	r28, r22
	//uint8_t pwm_r = (r * brillo);
	//uint8_t pwm_g = (g * brillo);
	//uint8_t pwm_b = (b * brillo);

	PWM0_dca(pwm_r, NO_INVERTING);   // Rojo ? PB1
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 2f       	mov	r24, r17
 288:	0e 94 96 01 	call	0x32c	; 0x32c <PWM0_dca>
	PWM0_dcb(pwm_g, NO_INVERTING);   // Verde ? PB2
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	8d 2f       	mov	r24, r29
 290:	0e 94 b6 01 	call	0x36c	; 0x36c <PWM0_dcb>
	PWM0_dcsw(pwm_b);                // Azul ? PB5 (PWM software)
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 d6 01 	call	0x3ac	; 0x3ac <PWM0_dcsw>

	ADC_start(3);  // Iniciar pr�xima conversi�n
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	0e 94 6f 00 	call	0xde	; 0xde <ADC_start>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	1f 91       	pop	r17
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <PWM0_init>:
 2c8:	e0 e8       	ldi	r30, 0x80	; 128
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	80 83       	st	Z, r24
 2d2:	80 81       	ld	r24, Z
 2d4:	8d 7f       	andi	r24, 0xFD	; 253
 2d6:	80 83       	st	Z, r24
 2d8:	e1 e8       	ldi	r30, 0x81	; 129
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 60       	ori	r24, 0x08	; 8
 2e0:	80 83       	st	Z, r24
 2e2:	80 81       	ld	r24, Z
 2e4:	8f 7e       	andi	r24, 0xEF	; 239
 2e6:	80 83       	st	Z, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	84 60       	ori	r24, 0x04	; 4
 2ec:	80 83       	st	Z, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	80 83       	st	Z, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	80 83       	st	Z, r24
 2fa:	84 b1       	in	r24, 0x04	; 4
 2fc:	86 60       	ori	r24, 0x06	; 6
 2fe:	84 b9       	out	0x04, r24	; 4
 300:	84 b1       	in	r24, 0x04	; 4
 302:	80 62       	ori	r24, 0x20	; 32
 304:	84 b9       	out	0x04, r24	; 4
 306:	85 b1       	in	r24, 0x05	; 5
 308:	8f 7d       	andi	r24, 0xDF	; 223
 30a:	85 b9       	out	0x05, r24	; 5
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 318:	82 e1       	ldi	r24, 0x12	; 18
 31a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 31e:	e0 e7       	ldi	r30, 0x70	; 112
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	82 60       	ori	r24, 0x02	; 2
 326:	80 83       	st	Z, r24
 328:	78 94       	sei
 32a:	08 95       	ret

0000032c <PWM0_dca>:
 32c:	61 30       	cpi	r22, 0x01	; 1
 32e:	49 f4       	brne	.+18     	; 0x342 <PWM0_dca+0x16>
 330:	e0 e8       	ldi	r30, 0x80	; 128
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	90 81       	ld	r25, Z
 336:	90 68       	ori	r25, 0x80	; 128
 338:	90 83       	st	Z, r25
 33a:	90 81       	ld	r25, Z
 33c:	9f 7b       	andi	r25, 0xBF	; 191
 33e:	90 83       	st	Z, r25
 340:	08 c0       	rjmp	.+16     	; 0x352 <PWM0_dca+0x26>
 342:	e0 e8       	ldi	r30, 0x80	; 128
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	90 81       	ld	r25, Z
 348:	90 68       	ori	r25, 0x80	; 128
 34a:	90 83       	st	Z, r25
 34c:	90 81       	ld	r25, Z
 34e:	90 64       	ori	r25, 0x40	; 64
 350:	90 83       	st	Z, r25
 352:	2f ef       	ldi	r18, 0xFF	; 255
 354:	82 9f       	mul	r24, r18
 356:	c0 01       	movw	r24, r0
 358:	11 24       	eor	r1, r1
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodhi4>
 362:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 366:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 36a:	08 95       	ret

0000036c <PWM0_dcb>:
 36c:	61 30       	cpi	r22, 0x01	; 1
 36e:	49 f4       	brne	.+18     	; 0x382 <PWM0_dcb+0x16>
 370:	e0 e8       	ldi	r30, 0x80	; 128
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	90 81       	ld	r25, Z
 376:	90 62       	ori	r25, 0x20	; 32
 378:	90 83       	st	Z, r25
 37a:	90 81       	ld	r25, Z
 37c:	9f 7e       	andi	r25, 0xEF	; 239
 37e:	90 83       	st	Z, r25
 380:	08 c0       	rjmp	.+16     	; 0x392 <PWM0_dcb+0x26>
 382:	e0 e8       	ldi	r30, 0x80	; 128
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	90 81       	ld	r25, Z
 388:	90 62       	ori	r25, 0x20	; 32
 38a:	90 83       	st	Z, r25
 38c:	90 81       	ld	r25, Z
 38e:	90 61       	ori	r25, 0x10	; 16
 390:	90 83       	st	Z, r25
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	82 9f       	mul	r24, r18
 396:	c0 01       	movw	r24, r0
 398:	11 24       	eor	r1, r1
 39a:	64 e6       	ldi	r22, 0x64	; 100
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodhi4>
 3a2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3a6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3aa:	08 95       	ret

000003ac <PWM0_dcsw>:
 3ac:	85 36       	cpi	r24, 0x65	; 101
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <PWM0_dcsw+0x6>
 3b0:	84 e6       	ldi	r24, 0x64	; 100
 3b2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <duty_sw>
 3b6:	08 95       	ret

000003b8 <__vector_7>:
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <counter_sw>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <counter_sw>
 3d0:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <counter_sw>
 3d4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <duty_sw>
 3d8:	98 17       	cp	r25, r24
 3da:	20 f4       	brcc	.+8      	; 0x3e4 <__vector_7+0x2c>
 3dc:	85 b1       	in	r24, 0x05	; 5
 3de:	80 62       	ori	r24, 0x20	; 32
 3e0:	85 b9       	out	0x05, r24	; 5
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <__vector_7+0x32>
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	8f 7d       	andi	r24, 0xDF	; 223
 3e8:	85 b9       	out	0x05, r24	; 5
 3ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <counter_sw>
 3ee:	84 36       	cpi	r24, 0x64	; 100
 3f0:	10 f0       	brcs	.+4      	; 0x3f6 <__vector_7+0x3e>
 3f2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <counter_sw>
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <UART_Init>:
 404:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 408:	87 e6       	ldi	r24, 0x67	; 103
 40a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 40e:	88 e9       	ldi	r24, 0x98	; 152
 410:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 41a:	08 95       	ret

0000041c <UART_EnviarString>:
 41c:	fc 01       	movw	r30, r24
 41e:	07 c0       	rjmp	.+14     	; 0x42e <UART_EnviarString+0x12>
 420:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 424:	95 ff       	sbrs	r25, 5
 426:	fc cf       	rjmp	.-8      	; 0x420 <UART_EnviarString+0x4>
 428:	31 96       	adiw	r30, 0x01	; 1
 42a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 42e:	80 81       	ld	r24, Z
 430:	81 11       	cpse	r24, r1
 432:	f6 cf       	rjmp	.-20     	; 0x420 <UART_EnviarString+0x4>
 434:	08 95       	ret

00000436 <__divmodhi4>:
 436:	97 fb       	bst	r25, 7
 438:	07 2e       	mov	r0, r23
 43a:	16 f4       	brtc	.+4      	; 0x440 <__divmodhi4+0xa>
 43c:	00 94       	com	r0
 43e:	07 d0       	rcall	.+14     	; 0x44e <__divmodhi4_neg1>
 440:	77 fd       	sbrc	r23, 7
 442:	09 d0       	rcall	.+18     	; 0x456 <__divmodhi4_neg2>
 444:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodhi4>
 448:	07 fc       	sbrc	r0, 7
 44a:	05 d0       	rcall	.+10     	; 0x456 <__divmodhi4_neg2>
 44c:	3e f4       	brtc	.+14     	; 0x45c <__divmodhi4_exit>

0000044e <__divmodhi4_neg1>:
 44e:	90 95       	com	r25
 450:	81 95       	neg	r24
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	08 95       	ret

00000456 <__divmodhi4_neg2>:
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255

0000045c <__divmodhi4_exit>:
 45c:	08 95       	ret

0000045e <__udivmodsi4>:
 45e:	a1 e2       	ldi	r26, 0x21	; 33
 460:	1a 2e       	mov	r1, r26
 462:	aa 1b       	sub	r26, r26
 464:	bb 1b       	sub	r27, r27
 466:	fd 01       	movw	r30, r26
 468:	0d c0       	rjmp	.+26     	; 0x484 <__udivmodsi4_ep>

0000046a <__udivmodsi4_loop>:
 46a:	aa 1f       	adc	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	ee 1f       	adc	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	a2 17       	cp	r26, r18
 474:	b3 07       	cpc	r27, r19
 476:	e4 07       	cpc	r30, r20
 478:	f5 07       	cpc	r31, r21
 47a:	20 f0       	brcs	.+8      	; 0x484 <__udivmodsi4_ep>
 47c:	a2 1b       	sub	r26, r18
 47e:	b3 0b       	sbc	r27, r19
 480:	e4 0b       	sbc	r30, r20
 482:	f5 0b       	sbc	r31, r21

00000484 <__udivmodsi4_ep>:
 484:	66 1f       	adc	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	1a 94       	dec	r1
 48e:	69 f7       	brne	.-38     	; 0x46a <__udivmodsi4_loop>
 490:	60 95       	com	r22
 492:	70 95       	com	r23
 494:	80 95       	com	r24
 496:	90 95       	com	r25
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	bd 01       	movw	r22, r26
 49e:	cf 01       	movw	r24, r30
 4a0:	08 95       	ret

000004a2 <__tablejump2__>:
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	05 90       	lpm	r0, Z+
 4a8:	f4 91       	lpm	r31, Z
 4aa:	e0 2d       	mov	r30, r0
 4ac:	09 94       	ijmp

000004ae <__umulhisi3>:
 4ae:	a2 9f       	mul	r26, r18
 4b0:	b0 01       	movw	r22, r0
 4b2:	b3 9f       	mul	r27, r19
 4b4:	c0 01       	movw	r24, r0
 4b6:	a3 9f       	mul	r26, r19
 4b8:	70 0d       	add	r23, r0
 4ba:	81 1d       	adc	r24, r1
 4bc:	11 24       	eor	r1, r1
 4be:	91 1d       	adc	r25, r1
 4c0:	b2 9f       	mul	r27, r18
 4c2:	70 0d       	add	r23, r0
 4c4:	81 1d       	adc	r24, r1
 4c6:	11 24       	eor	r1, r1
 4c8:	91 1d       	adc	r25, r1
 4ca:	08 95       	ret

000004cc <__udivmodhi4>:
 4cc:	aa 1b       	sub	r26, r26
 4ce:	bb 1b       	sub	r27, r27
 4d0:	51 e1       	ldi	r21, 0x11	; 17
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__udivmodhi4_ep>

000004d4 <__udivmodhi4_loop>:
 4d4:	aa 1f       	adc	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	a6 17       	cp	r26, r22
 4da:	b7 07       	cpc	r27, r23
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <__udivmodhi4_ep>
 4de:	a6 1b       	sub	r26, r22
 4e0:	b7 0b       	sbc	r27, r23

000004e2 <__udivmodhi4_ep>:
 4e2:	88 1f       	adc	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	5a 95       	dec	r21
 4e8:	a9 f7       	brne	.-22     	; 0x4d4 <__udivmodhi4_loop>
 4ea:	80 95       	com	r24
 4ec:	90 95       	com	r25
 4ee:	bc 01       	movw	r22, r24
 4f0:	cd 01       	movw	r24, r26
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
